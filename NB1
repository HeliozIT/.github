{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b15ab9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T02:36:26.494413Z",
     "iopub.status.busy": "2024-09-11T02:36:26.493933Z",
     "iopub.status.idle": "2024-09-11T02:36:34.110607Z",
     "shell.execute_reply": "2024-09-11T02:36:34.109137Z"
    },
    "papermill": {
     "duration": 7.625812,
     "end_time": "2024-09-11T02:36:34.113627",
     "exception": false,
     "start_time": "2024-09-11T02:36:26.487815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Places DataFrame columns: Index(['name', 'lat', 'lng', 'formatted_address', 'rating',\n",
      "       'user_ratings_total', 'latest_reviews'],\n",
      "      dtype='object')\n",
      "Preferences DataFrame columns: Index(['User ID', 'Name', 'Email', 'Preferred Activities',\n",
      "       'Bucket list destinations Sri Lanka'],\n",
      "      dtype='object')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>lat</th>\n",
       "      <th>lng</th>\n",
       "      <th>formatted_address</th>\n",
       "      <th>rating</th>\n",
       "      <th>user_ratings_total</th>\n",
       "      <th>latest_reviews</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arugam Bay Beach</td>\n",
       "      <td>6.840408</td>\n",
       "      <td>81.836848</td>\n",
       "      <td>Arugam Bay Beach, Sri Lanka</td>\n",
       "      <td>4.8</td>\n",
       "      <td>1591.0</td>\n",
       "      <td>['Arugam Bay Beach is a surfer's paradise! I s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mirissa Beach</td>\n",
       "      <td>5.944703</td>\n",
       "      <td>80.459161</td>\n",
       "      <td>Mirissa, Sri Lanka</td>\n",
       "      <td>4.6</td>\n",
       "      <td>1748.0</td>\n",
       "      <td>['Mirissa Beach is truly a gem on Sri LankaÃ¢Â...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Weligama Beach (surf and stay)</td>\n",
       "      <td>5.972486</td>\n",
       "      <td>80.435714</td>\n",
       "      <td>Weligama, Sri Lanka</td>\n",
       "      <td>4.4</td>\n",
       "      <td>325.0</td>\n",
       "      <td>['Weligama Beach is a fantastic spot for both ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ahangama</td>\n",
       "      <td>5.973975</td>\n",
       "      <td>80.362159</td>\n",
       "      <td>Ahangama, Sri Lanka</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>['Ahangama was a bit disappointing for me as a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Hikkaduwa Beach</td>\n",
       "      <td>6.137727</td>\n",
       "      <td>80.099060</td>\n",
       "      <td>Hikkaduwa Beach, Sri Lanka</td>\n",
       "      <td>4.7</td>\n",
       "      <td>1438.0</td>\n",
       "      <td>['Hikkaduwa Beach is a delightful escape for s...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             name       lat        lng  \\\n",
       "0                Arugam Bay Beach  6.840408  81.836848   \n",
       "1                   Mirissa Beach  5.944703  80.459161   \n",
       "2  Weligama Beach (surf and stay)  5.972486  80.435714   \n",
       "3                        Ahangama  5.973975  80.362159   \n",
       "4                 Hikkaduwa Beach  6.137727  80.099060   \n",
       "\n",
       "             formatted_address  rating  user_ratings_total  \\\n",
       "0  Arugam Bay Beach, Sri Lanka     4.8              1591.0   \n",
       "1           Mirissa, Sri Lanka     4.6              1748.0   \n",
       "2          Weligama, Sri Lanka     4.4               325.0   \n",
       "3          Ahangama, Sri Lanka     NaN                 NaN   \n",
       "4   Hikkaduwa Beach, Sri Lanka     4.7              1438.0   \n",
       "\n",
       "                                      latest_reviews  \n",
       "0  ['Arugam Bay Beach is a surfer's paradise! I s...  \n",
       "1  ['Mirissa Beach is truly a gem on Sri LankaÃ¢Â...  \n",
       "2  ['Weligama Beach is a fantastic spot for both ...  \n",
       "3  ['Ahangama was a bit disappointing for me as a...  \n",
       "4  ['Hikkaduwa Beach is a delightful escape for s...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>Name</th>\n",
       "      <th>Email</th>\n",
       "      <th>Preferred Activities</th>\n",
       "      <th>Bucket list destinations Sri Lanka</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Jennifer Quinn</td>\n",
       "      <td>jennifer.quinn@example.com</td>\n",
       "      <td>['cycling', 'historical monuments', 'village h...</td>\n",
       "      <td>['Polonnaruwa', 'Hatton', 'Anuradhapura', 'Ell...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Emily Perry</td>\n",
       "      <td>emily.perry@example.com</td>\n",
       "      <td>['butterfly watching', 'hot springs', 'wildlif...</td>\n",
       "      <td>['Madunagala Hot Water Spring', 'Wilpattu Nati...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Danielle Mcbride</td>\n",
       "      <td>danielle.mcbride@example.com</td>\n",
       "      <td>['sea cruises', 'themed parks', 'craft worksho...</td>\n",
       "      <td>['Mirissa Beach', 'Negombo Lagoon', 'Batadomba...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Angelica Wilson</td>\n",
       "      <td>angelica.wilson@example.com</td>\n",
       "      <td>['fishing', 'hot springs', 'sailing']</td>\n",
       "      <td>['Maha Oya Hot Water Springs', 'Colombo Port C...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Laurie Powers</td>\n",
       "      <td>laurie.powers@example.com</td>\n",
       "      <td>['history tours', 'sailing', 'literary tours']</td>\n",
       "      <td>['Negombo Lagoon', 'Colombo Port City', 'Galle...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID              Name                         Email  \\\n",
       "0        1    Jennifer Quinn    jennifer.quinn@example.com   \n",
       "1        2       Emily Perry       emily.perry@example.com   \n",
       "2        3  Danielle Mcbride  danielle.mcbride@example.com   \n",
       "3        4   Angelica Wilson   angelica.wilson@example.com   \n",
       "4        5     Laurie Powers     laurie.powers@example.com   \n",
       "\n",
       "                                Preferred Activities  \\\n",
       "0  ['cycling', 'historical monuments', 'village h...   \n",
       "1  ['butterfly watching', 'hot springs', 'wildlif...   \n",
       "2  ['sea cruises', 'themed parks', 'craft worksho...   \n",
       "3              ['fishing', 'hot springs', 'sailing']   \n",
       "4     ['history tours', 'sailing', 'literary tours']   \n",
       "\n",
       "                  Bucket list destinations Sri Lanka  \n",
       "0  ['Polonnaruwa', 'Hatton', 'Anuradhapura', 'Ell...  \n",
       "1  ['Madunagala Hot Water Spring', 'Wilpattu Nati...  \n",
       "2  ['Mirissa Beach', 'Negombo Lagoon', 'Batadomba...  \n",
       "3  ['Maha Oya Hot Water Springs', 'Colombo Port C...  \n",
       "4  ['Negombo Lagoon', 'Colombo Port City', 'Galle...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data cleaned\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from IPython.display import display\n",
    "import re \n",
    "\n",
    "# Load the Excel files amu amuwe\n",
    "places_df = pd.read_excel(\"/kaggle/input/travelsense/Places Dataset.xlsx\")\n",
    "preferences_df = pd.read_excel(\"/kaggle/input/travelsense/Visitors Preference Dataset.xlsx\")\n",
    "\n",
    "# Display the colums. Check krnawa redda hariyata enwada kyala\n",
    "print(\"Places DataFrame columns:\", places_df.columns)\n",
    "print(\"Preferences DataFrame columns:\", preferences_df.columns)\n",
    "\n",
    "# Adjust the column names based on the actual names in your files. Hariytama thyenne one nathnam RIP\n",
    "places = pd.read_excel(\"/kaggle/input/travelsense/Places Dataset.xlsx\", \n",
    "                       usecols=['name', 'lat', 'lng', 'formatted_address', 'rating',\n",
    "       'user_ratings_total', 'latest_reviews'])\n",
    "\n",
    "preferences = pd.read_excel(\"/kaggle/input/travelsense/Visitors Preference Dataset.xlsx\", \n",
    "                            usecols=['User ID', 'Name', 'Email', 'Preferred Activities',\n",
    "       'Bucket list destinations Sri Lanka'])\n",
    "\n",
    "\n",
    "# Display the DataFrames as tables\n",
    "display(places_df.head())\n",
    "display(preferences_df.head())\n",
    "\n",
    "#Theres a LOT of ugly code, this part i dont know to solve, so got from chatgpt, but it works fine\n",
    "\n",
    "def clean_text(text):\n",
    "    # Remove non-ASCII characters\n",
    "    text = re.sub(r'[^\\x00-\\x7F]+', '', text)\n",
    "    # Remove any other unwanted characters or patterns if necessary\n",
    "    text = re.sub(r'\\s+', ' ', text)  # Replace multiple spaces with a single space\n",
    "    return text\n",
    "\n",
    "# Apply the cleaning function to the 'latest_reviews' column\n",
    "places_df['latest_reviews'] = places_df['latest_reviews'].apply(clean_text)\n",
    "\n",
    "print(\"Data cleaned\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b4b90e4b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T02:36:34.123234Z",
     "iopub.status.busy": "2024-09-11T02:36:34.122582Z",
     "iopub.status.idle": "2024-09-11T02:36:37.424996Z",
     "shell.execute_reply": "2024-09-11T02:36:37.423667Z"
    },
    "papermill": {
     "duration": 3.310487,
     "end_time": "2024-09-11T02:36:37.428081",
     "exception": false,
     "start_time": "2024-09-11T02:36:34.117594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    10   12  12th   20   30  300   38   45  4km  4x4  ...  yoga  you_x009d_  \\\n",
      "0  0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   0.0         0.0   \n",
      "1  0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   0.0         0.0   \n",
      "2  0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   0.0         0.0   \n",
      "3  0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   0.0         0.0   \n",
      "4  0.0  0.0   0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  ...   0.0         0.0   \n",
      "\n",
      "   youll  young  younger  youngest     youre  youth  zone  zones  \n",
      "0    0.0    0.0      0.0       0.0  0.000000    0.0   0.0    0.0  \n",
      "1    0.0    0.0      0.0       0.0  0.073868    0.0   0.0    0.0  \n",
      "2    0.0    0.0      0.0       0.0  0.000000    0.0   0.0    0.0  \n",
      "3    0.0    0.0      0.0       0.0  0.000000    0.0   0.0    0.0  \n",
      "4    0.0    0.0      0.0       0.0  0.000000    0.0   0.0    0.0  \n",
      "\n",
      "[5 rows x 3088 columns]\n",
      "                            name       lat        lng       formatted_address  \\\n",
      "15       Minneriya National Park  8.015644  80.844670               Sri Lanka   \n",
      "41         National Museum Galle  6.028918  80.216879       Galle , Sri Lanka   \n",
      "309            Trincomalee Beach  8.573346  81.239277  Trincomalee, Sri Lanka   \n",
      "1                  Mirissa Beach  5.944703  80.459161      Mirissa, Sri Lanka   \n",
      "17   Horton Plains National Park  6.809446  80.802333               Sri Lanka   \n",
      "\n",
      "     rating  user_ratings_total  \\\n",
      "15      4.6              1293.0   \n",
      "41      4.2               357.0   \n",
      "309     4.5               196.0   \n",
      "1       4.6              1748.0   \n",
      "17      4.7              8564.0   \n",
      "\n",
      "                                        latest_reviews  similarity  \n",
      "15   Minneriya National Park is a must-visit for wi...    0.071028  \n",
      "41   The National Museum Galle is a charming little...    0.068934  \n",
      "309  Trincomalee Beach is a hidden gem! The soft go...    0.068193  \n",
      "1    Mirissa Beach is truly a gem on Sri Lankas sou...    0.065216  \n",
      "17   Horton Plains National Park was an incredible ...    0.063208  \n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import pandas as pd\n",
    "from ast import literal_eval\n",
    "\n",
    "# Function to safely evaluate strings that are lists\n",
    "def safely_evaluate(data):\n",
    "    try:\n",
    "        evaluated_data = literal_eval(data)\n",
    "        if isinstance(evaluated_data, list) and all(isinstance(item, str) for item in evaluated_data):\n",
    "            return ' '.join(evaluated_data)\n",
    "        else:\n",
    "            return ''\n",
    "    except (ValueError, SyntaxError):\n",
    "        return ''\n",
    "\n",
    "# Convert lists of reviews to a single string for each place\n",
    "places_df['latest_reviews'] = places_df['latest_reviews'].apply(safely_evaluate)\n",
    "\n",
    "# Initialize the TF-IDF Vectorizer\n",
    "tfidf_vectorizer = TfidfVectorizer(stop_words='english')\n",
    "tfidf_matrix = tfidf_vectorizer.fit_transform(places_df['latest_reviews'])\n",
    "\n",
    "# Convert user preferences to a single string for each user\n",
    "preferences_df['Preferred Activities'] = preferences_df['Preferred Activities'].apply(safely_evaluate)\n",
    "preferences_df['Bucket list destinations Sri Lanka'] = preferences_df['Bucket list destinations Sri Lanka'].apply(safely_evaluate)\n",
    "\n",
    "# Combine both columns into one for vectorization\n",
    "preferences_df['combined_preferences'] = preferences_df['Preferred Activities'] + ' ' + preferences_df['Bucket list destinations Sri Lanka']\n",
    "\n",
    "# Vectorize user preferences\n",
    "user_preferences_vector = tfidf_vectorizer.transform(preferences_df['combined_preferences'])\n",
    "\n",
    "# Compute similarity scores between user preferences and places\n",
    "similarity_scores = cosine_similarity(user_preferences_vector, tfidf_matrix)\n",
    "\n",
    "# For each user, find the top recommendations\n",
    "for idx, user in preferences_df.iterrows():\n",
    "    user_name = user['Name']\n",
    "    user_email = user['Email']\n",
    "    \n",
    "    # Get similarity scores for this user\n",
    "    user_similarity_scores = similarity_scores[idx]\n",
    "\n",
    "# Add similarity scores to the DataFrame\n",
    "places_df['similarity'] = user_similarity_scores\n",
    "\n",
    "# Compute the mean similarity score across all users for each place\n",
    "places_df['similarity'] = similarity_scores.mean(axis=0)\n",
    "\n",
    "# Sort the places DataFrame by similarity score to get recommendations\n",
    "recommended_places = places_df.sort_values(by='similarity', ascending=False)\n",
    "\n",
    "# Convert the TF-IDF matrix to a DataFrame for inspection\n",
    "features_df = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf_vectorizer.get_feature_names_out())\n",
    "\n",
    "# Inspect the features DataFrame\n",
    "print(features_df.head())\n",
    "\n",
    "# Optionally, display recommended places\n",
    "print(recommended_places.head())\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9e7d5c55",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T02:36:37.437678Z",
     "iopub.status.busy": "2024-09-11T02:36:37.437057Z",
     "iopub.status.idle": "2024-09-11T02:36:38.391617Z",
     "shell.execute_reply": "2024-09-11T02:36:38.390247Z"
    },
    "papermill": {
     "duration": 0.962703,
     "end_time": "2024-09-11T02:36:38.394449",
     "exception": false,
     "start_time": "2024-09-11T02:36:37.431746",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top Recommendations for Danielle Mcbride\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>formatted_address</th>\n",
       "      <th>rating</th>\n",
       "      <th>latest_reviews</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Jungle Beach</td>\n",
       "      <td>Jungle Beach, Sri Lanka</td>\n",
       "      <td>4.6</td>\n",
       "      <td>Jungle Beach is a hidden gem! The trek to get ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66</th>\n",
       "      <td>Cinnamon Bentota Beach</td>\n",
       "      <td>Bentota , Sri Lanka</td>\n",
       "      <td>4.9</td>\n",
       "      <td>Cinnamon Bentota Beach was a delightful escape...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mirissa Beach</td>\n",
       "      <td>Mirissa, Sri Lanka</td>\n",
       "      <td>4.6</td>\n",
       "      <td>Mirissa Beach is truly a gem on Sri Lankas sou...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Unawatuna Beach</td>\n",
       "      <td>Unawatuna Beach, Sri Lanka</td>\n",
       "      <td>4.8</td>\n",
       "      <td>Unawatuna Beach is a slice of paradise! The wa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Mirissa</td>\n",
       "      <td>Mirissa, Sri Lanka</td>\n",
       "      <td>NaN</td>\n",
       "      <td>I recently went on a sea cruise in Mirissa, an...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>406</th>\n",
       "      <td>Uppuveli Beach</td>\n",
       "      <td>Trincomalee, Sri Lanka</td>\n",
       "      <td>4.3</td>\n",
       "      <td>Uppuveli Beach is a stunning escape! The soft ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>286</th>\n",
       "      <td>Kudawa Beach Kalpitiya</td>\n",
       "      <td>ÃƒÂ Ã‚Â¶Ã‚Â´ÃƒÂ Ã‚Â·Ã‚Â”ÃƒÂ Ã‚Â¶Ã‚Â­ÃƒÂ Ã‚Â·Ã‚...</td>\n",
       "      <td>4.3</td>\n",
       "      <td>Kudawa Beach Kalpitiya is a hidden gem! The so...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404</th>\n",
       "      <td>Nilaveli Beach</td>\n",
       "      <td>Nilaveli Beach, Sri Lanka</td>\n",
       "      <td>4.5</td>\n",
       "      <td>Nilaveli Beach is a beautiful escape with stun...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>Mullaitivu Beach</td>\n",
       "      <td>Mullaitivu, Sri Lanka</td>\n",
       "      <td>4.1</td>\n",
       "      <td>Mullaitivu Beach is a hidden gem! The soft san...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Tangalle Beach</td>\n",
       "      <td>Tangalle, Sri Lanka</td>\n",
       "      <td>4.2</td>\n",
       "      <td>Tangalle Beach is a hidden gem! The soft sands...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       name  \\\n",
       "33             Jungle Beach   \n",
       "66   Cinnamon Bentota Beach   \n",
       "1             Mirissa Beach   \n",
       "6           Unawatuna Beach   \n",
       "46                  Mirissa   \n",
       "406          Uppuveli Beach   \n",
       "286  Kudawa Beach Kalpitiya   \n",
       "404          Nilaveli Beach   \n",
       "259        Mullaitivu Beach   \n",
       "32           Tangalle Beach   \n",
       "\n",
       "                                     formatted_address  rating  \\\n",
       "33                             Jungle Beach, Sri Lanka     4.6   \n",
       "66                                 Bentota , Sri Lanka     4.9   \n",
       "1                                   Mirissa, Sri Lanka     4.6   \n",
       "6                           Unawatuna Beach, Sri Lanka     4.8   \n",
       "46                                  Mirissa, Sri Lanka     NaN   \n",
       "406                             Trincomalee, Sri Lanka     4.3   \n",
       "286  ÃƒÂ Ã‚Â¶Ã‚Â´ÃƒÂ Ã‚Â·Ã‚Â”ÃƒÂ Ã‚Â¶Ã‚Â­ÃƒÂ Ã‚Â·Ã‚...     4.3   \n",
       "404                          Nilaveli Beach, Sri Lanka     4.5   \n",
       "259                              Mullaitivu, Sri Lanka     4.1   \n",
       "32                                 Tangalle, Sri Lanka     4.2   \n",
       "\n",
       "                                        latest_reviews  \n",
       "33   Jungle Beach is a hidden gem! The trek to get ...  \n",
       "66   Cinnamon Bentota Beach was a delightful escape...  \n",
       "1    Mirissa Beach is truly a gem on Sri Lankas sou...  \n",
       "6    Unawatuna Beach is a slice of paradise! The wa...  \n",
       "46   I recently went on a sea cruise in Mirissa, an...  \n",
       "406  Uppuveli Beach is a stunning escape! The soft ...  \n",
       "286  Kudawa Beach Kalpitiya is a hidden gem! The so...  \n",
       "404  Nilaveli Beach is a beautiful escape with stun...  \n",
       "259  Mullaitivu Beach is a hidden gem! The soft san...  \n",
       "32   Tangalle Beach is a hidden gem! The soft sands...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "def get_recommendations(user_id, top_n=10):\n",
    "    \n",
    "    # U mulinma innawada blnwa\n",
    "    if user_id not in preferences_df['User ID'].values:\n",
    "        return f\"User ID {user_id} not found.\"\n",
    "    \n",
    "    # Get the index of the user. Eken thamai serama sellam danne\n",
    "    user_index = preferences_df[preferences_df['User ID'] == user_id].index[0]\n",
    "    \n",
    "    # Get the user's name\n",
    "    user_name = preferences_df.loc[preferences_df['User ID'] == user_id, 'Name'].values[0]\n",
    "\n",
    "        # Get the similarity scores for that user\n",
    "    user_scores = similarity_scores[user_index]\n",
    "    \n",
    "    # Sort places by the similarity score for this user\n",
    "    recommended_indices = user_scores.argsort()[-top_n:][::-1]\n",
    "    \n",
    "  # Get the top n recommended places\n",
    "    recommended_places = places_df.iloc[recommended_indices]\n",
    "    \n",
    "    # Return the user's name and the recommended places\n",
    "    return user_name, recommended_places[['name', 'formatted_address', 'rating', 'latest_reviews']]\n",
    "    recommendations_df.index += 1  # Start index from 1 for readability,otherwise it ugly af\n",
    "    \n",
    " # Add a column for the user's name\n",
    "    recommendations_df['User Name'] = user_name\n",
    "    \n",
    "    return recommendations_df\n",
    "\n",
    "\n",
    "\n",
    "# Example User ID to test this thing. Host kraddi remove dis\n",
    "user_id = 3 #When testing, add different id numbers and check with the dataset,pennana ewa matching da kyala\n",
    "user_name, recommendations = get_recommendations(user_id)\n",
    "\n",
    "print(f\"Top Recommendations for {user_name}\")\n",
    "\n",
    "\n",
    "# Display the reccs in a table\n",
    "recommendations_display = recommendations[['name', 'formatted_address', 'rating', 'latest_reviews']]\n",
    "display(recommendations_display)\n",
    "\n",
    "#Bar chart ekak hariyata blmu\n",
    "\n",
    "def plot_recommendations(recommendations, user_name):\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    sns.barplot(x='rating', y='name', data=recommendations, palette='viridis')\n",
    "    plt.title(f\"Top Recommendations for {user_name} based on reviews\")\n",
    "    plt.xlabel('Rating')\n",
    "    plt.ylabel('Place')\n",
    "    plt.show()\n",
    "\n",
    "# Plot the top recommendations for the user\n",
    "plot_recommendations(recommendations, user_name)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5672653,
     "sourceId": 9357022,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.77996,
   "end_time": "2024-09-11T02:36:39.122066",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-11T02:36:23.342106",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
