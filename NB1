{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4fc1d5fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-11T05:27:15.265815Z",
     "iopub.status.busy": "2024-09-11T05:27:15.265337Z",
     "iopub.status.idle": "2024-09-11T05:27:19.255656Z",
     "shell.execute_reply": "2024-09-11T05:27:19.254347Z"
    },
    "papermill": {
     "duration": 3.997996,
     "end_time": "2024-09-11T05:27:19.258340",
     "exception": false,
     "start_time": "2024-09-11T05:27:15.260344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top Recommendations for Hailey Bishop\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3575202948.py:69: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  cleaned_places_df.loc[:, 'similarity'] = similarity_scores.mean(axis=0)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>formatted_address</th>\n",
       "      <th>rating</th>\n",
       "      <th>latest_reviews</th>\n",
       "      <th>User Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>234</th>\n",
       "      <td>Sangupiddi Bridge</td>\n",
       "      <td>Navathkuli - Karativu - Mannar Hwy, Sri Lanka</td>\n",
       "      <td>4.4</td>\n",
       "      <td>Sangupiddi Bridge is a breathtaking sight! Wal...</td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Wilpattu National Park</td>\n",
       "      <td>Sri Lanka</td>\n",
       "      <td>4.7</td>\n",
       "      <td>Wilpattu National Park is a fantastic destinat...</td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Hikkaduwa Beach</td>\n",
       "      <td>Hikkaduwa Beach, Sri Lanka</td>\n",
       "      <td>4.7</td>\n",
       "      <td></td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Tangalle</td>\n",
       "      <td>Tangalle, Sri Lanka</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tangalle was a bit of a letdown for me. The be...</td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Maritime Museum</td>\n",
       "      <td>Galle , Sri Lanka</td>\n",
       "      <td>4.3</td>\n",
       "      <td></td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Gangaramaya Temple</td>\n",
       "      <td>Colombo , Sri Lanka</td>\n",
       "      <td>4.5</td>\n",
       "      <td></td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>ÃÂÃÂriapÃÂÃÂla Mask Museum</td>\n",
       "      <td>Ambalangoda, Sri Lanka</td>\n",
       "      <td>4.1</td>\n",
       "      <td></td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>Tissamaharama Raja Maha Vihara</td>\n",
       "      <td>Tissamaharama, Sri Lanka</td>\n",
       "      <td>4.4</td>\n",
       "      <td></td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242</th>\n",
       "      <td>National Shrine of Our Lady of Madhu</td>\n",
       "      <td>Madu, Sri Lanka</td>\n",
       "      <td>4.5</td>\n",
       "      <td>Visiting the National Shrine of Our Lady of Ma...</td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>Lunuganga</td>\n",
       "      <td>Bentota, Sri Lanka</td>\n",
       "      <td>4.7</td>\n",
       "      <td></td>\n",
       "      <td>Hailey Bishop</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     name  \\\n",
       "234                     Sangupiddi Bridge   \n",
       "14                 Wilpattu National Park   \n",
       "5                         Hikkaduwa Beach   \n",
       "6                                Tangalle   \n",
       "44                        Maritime Museum   \n",
       "55                     Gangaramaya Temple   \n",
       "100    ÃÂÃÂriapÃÂÃÂla Mask Museum   \n",
       "201        Tissamaharama Raja Maha Vihara   \n",
       "242  National Shrine of Our Lady of Madhu   \n",
       "180                             Lunuganga   \n",
       "\n",
       "                                 formatted_address  rating  \\\n",
       "234  Navathkuli - Karativu - Mannar Hwy, Sri Lanka     4.4   \n",
       "14                                       Sri Lanka     4.7   \n",
       "5                       Hikkaduwa Beach, Sri Lanka     4.7   \n",
       "6                              Tangalle, Sri Lanka     NaN   \n",
       "44                               Galle , Sri Lanka     4.3   \n",
       "55                             Colombo , Sri Lanka     4.5   \n",
       "100                         Ambalangoda, Sri Lanka     4.1   \n",
       "201                       Tissamaharama, Sri Lanka     4.4   \n",
       "242                                Madu, Sri Lanka     4.5   \n",
       "180                             Bentota, Sri Lanka     4.7   \n",
       "\n",
       "                                        latest_reviews      User Name  \n",
       "234  Sangupiddi Bridge is a breathtaking sight! Wal...  Hailey Bishop  \n",
       "14   Wilpattu National Park is a fantastic destinat...  Hailey Bishop  \n",
       "5                                                       Hailey Bishop  \n",
       "6    Tangalle was a bit of a letdown for me. The be...  Hailey Bishop  \n",
       "44                                                      Hailey Bishop  \n",
       "55                                                      Hailey Bishop  \n",
       "100                                                     Hailey Bishop  \n",
       "201                                                     Hailey Bishop  \n",
       "242  Visiting the National Shrine of Our Lady of Ma...  Hailey Bishop  \n",
       "180                                                     Hailey Bishop  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "from ast import literal_eval\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Function to safely evaluate strings that are lists\n",
    "def safely_evaluate(data):\n",
    "    try:\n",
    "        evaluated_data = literal_eval(data)\n",
    "        if isinstance(evaluated_data, list) and all(isinstance(item, str) for item in evaluated_data):\n",
    "            return ' '.join(evaluated_data)\n",
    "        else:\n",
    "            return ''\n",
    "    except (ValueError, SyntaxError):\n",
    "        return ''\n",
    "\n",
    "# Function to remove non-ASCII characters and clean encoding issues\n",
    "def clean_text(text):\n",
    "    if isinstance(text, str):\n",
    "        # Attempt to decode and re-encode the text to clean bad characters\n",
    "        text = text.encode('latin1', errors='ignore').decode('utf-8', errors='ignore')\n",
    "        # Remove any remaining non-ASCII characters\n",
    "        text = re.sub(r'[^\\x00-\\x7F]+', '', text)\n",
    "    return text\n",
    "\n",
    "# Load the Excel files\n",
    "places_df = pd.read_csv(\"/kaggle/input/travelsensedsincsv/Places Dataset.csv\",encoding='ISO-8859-1')\n",
    "preferences_df = pd.read_csv(\"/kaggle/input/travelsensedsincsv/Visitors Preference Dataset.csv\",encoding='ISO-8859-1')\n",
    "\n",
    "# Apply data cleaning to 'latest_reviews'\n",
    "places_df['latest_reviews'] = places_df['latest_reviews'].apply(safely_evaluate)\n",
    "places_df['latest_reviews'] = places_df['latest_reviews'].apply(clean_text)\n",
    "\n",
    "# Filter out empty or meaningless reviews\n",
    "cleaned_places_df = places_df[places_df['latest_reviews'].str.strip() != '']\n",
    "\n",
    "# Clean user preferences\n",
    "preferences_df['Preferred Activities'] = preferences_df['Preferred Activities'].apply(safely_evaluate)\n",
    "preferences_df['Bucket list destinations Sri Lanka'] = preferences_df['Bucket list destinations Sri Lanka'].apply(safely_evaluate)\n",
    "preferences_df['Preferred Activities'] = preferences_df['Preferred Activities'].apply(clean_text)\n",
    "preferences_df['Bucket list destinations Sri Lanka'] = preferences_df['Bucket list destinations Sri Lanka'].apply(clean_text)\n",
    "\n",
    "# Combine user preferences into a single column\n",
    "preferences_df['combined_preferences'] = preferences_df['Preferred Activities'] + ' ' + preferences_df['Bucket list destinations Sri Lanka']\n",
    "\n",
    "# Filter out empty combined preferences\n",
    "cleaned_preferences_df = preferences_df[preferences_df['combined_preferences'].str.strip() != '']\n",
    "\n",
    "# Ensure there are non-empty text fields before applying TF-IDF\n",
    "if cleaned_places_df['latest_reviews'].empty or cleaned_preferences_df['combined_preferences'].empty:\n",
    "    raise ValueError(\"No valid data to vectorize after cleaning.\")\n",
    "\n",
    "# Initialize the TF-IDF Vectorizer\n",
    "tfidf_vectorizer = TfidfVectorizer(stop_words='english')\n",
    "\n",
    "# Vectorize the cleaned places data\n",
    "tfidf_matrix = tfidf_vectorizer.fit_transform(cleaned_places_df['latest_reviews'])\n",
    "\n",
    "# Vectorize user preferences\n",
    "user_preferences_vector = tfidf_vectorizer.transform(cleaned_preferences_df['combined_preferences'])\n",
    "\n",
    "# Compute similarity scores between user preferences and places\n",
    "similarity_scores = cosine_similarity(user_preferences_vector, tfidf_matrix)\n",
    "\n",
    "# Add similarity scores to the DataFrame (average of all user preferences)\n",
    "cleaned_places_df.loc[:, 'similarity'] = similarity_scores.mean(axis=0)\n",
    "\n",
    "# Sort the places DataFrame by similarity score to get recommendations\n",
    "recommended_places = cleaned_places_df.sort_values(by='similarity', ascending=False)\n",
    "\n",
    "# Function to get recommendations for a specific user by user ID\n",
    "def get_recommendations(user_id, top_n=10):\n",
    "    # Check if the user exists in the dataset\n",
    "    if user_id not in preferences_df['User ID'].values:\n",
    "        return f\"User ID {user_id} not found.\"\n",
    "    \n",
    "    # Get the index of the user\n",
    "    user_index = preferences_df[preferences_df['User ID'] == user_id].index[0]\n",
    "    \n",
    "    # Get the user's name\n",
    "    user_name = preferences_df.loc[preferences_df['User ID'] == user_id, 'Name'].values[0]\n",
    "\n",
    "    # Get the similarity scores for that user\n",
    "    user_scores = similarity_scores[user_index]\n",
    "    \n",
    "    # Sort places by similarity score for this user\n",
    "    recommended_indices = user_scores.argsort()[-top_n:][::-1]\n",
    "    \n",
    "    # Get the top n recommended places\n",
    "    recommended_places = places_df.iloc[recommended_indices].copy()\n",
    "    \n",
    "    # Add a column for the user's name in the recommendations\n",
    "    recommended_places['User Name'] = user_name\n",
    "    \n",
    "    # Reset index for readability (1-based index)\n",
    "    recommended_places.index = recommended_places.index + 1\n",
    "    \n",
    "    return user_name, recommended_places[['name', 'formatted_address', 'rating', 'latest_reviews', 'User Name']]\n",
    "\n",
    "# Function to plot the recommendations as a bar chart\n",
    "def plot_recommendations(recommendations, user_name):\n",
    "    plt.figure(figsize=(10, 5))\n",
    "    \n",
    "    # Set a different font if needed\n",
    "    plt.rcParams['font.sans-serif'] = ['Arial']  # You can change this to a different font\n",
    "    \n",
    "    sns.barplot(x='rating', y='name', data=recommendations, palette='viridis')\n",
    "    plt.title(f\"Top Recommendations for {user_name} based on reviews\")\n",
    "    plt.xlabel('Rating')\n",
    "    plt.ylabel('Place')\n",
    "    plt.show()\n",
    "# Example: Get top recommendations for a user and plot them\n",
    "user_id = 29 # Example user ID, adjust based on your data\n",
    "user_name, recommendations = get_recommendations(user_id)\n",
    "\n",
    "print(f\"Top Recommendations for {user_name}\")\n",
    "\n",
    "# Display the recommendations in a table\n",
    "display(recommendations)\n",
    "\n",
    "# Plot the recommendations for the user\n",
    "plot_recommendations(recommendations.head(5), user_name)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5672653,
     "sourceId": 9357022,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5678022,
     "sourceId": 9363998,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.602451,
   "end_time": "2024-09-11T05:27:19.883635",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-11T05:27:12.281184",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
