{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9365418,"sourceType":"datasetVersion","datasetId":5679149}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nfrom ast import literal_eval\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#pip install pandas scikit-learn matplotlib seaborn\n#installe these when note in an enviorenment\n\n# Function to safely evaluate strings that are lists (for original data inspection)\ndef safely_evaluate(data):\n    try:\n        evaluated_data = literal_eval(data)\n        if isinstance(evaluated_data, list) and all(isinstance(item, str) for item in evaluated_data):\n            return ' '.join(evaluated_data)\n        else:\n            return ''\n    except (ValueError, SyntaxError):\n        return ''\n\n# Load the datasets as excel files \nplaces_df = pd.read_excel(\"/kaggle/input/travelsenseds/Places Dataset.xlsx\")\npreferences_df = pd.read_excel(\"/kaggle/input/travelsenseds/Visitors Preference Dataset.xlsx\")\n\n# Display the first few rows of the places and preferences datasets\nprint(\"First few rows of Places Dataset:\")\nprint(places_df.head())\n\nprint(\"First few rows of Preferences Dataset:\")\nprint(preferences_df.head())\n\n# Visualization of original data to get an idea about what kind of output we can expect\n# Visualizing the distribution of ratings in the places dataset\nplt.figure(figsize=(10, 5))\nsns.histplot(places_df['rating'].dropna(), bins=10, kde=True, color='blue')\nplt.title('Distribution of Ratings in Places Dataset')\nplt.xlabel('Rating')\nplt.ylabel('Frequency')\nplt.show()\n\n# Visualizing the count of preferred activities in the preferences dataset\nplt.figure(figsize=(10, 5))\npreferences_df['Preferred Activities'].apply(lambda x: safely_evaluate(x)).value_counts().head(10).plot(kind='bar', color='green')\nplt.title('Top 10 Preferred Activities in Preferences Dataset')\nplt.xlabel('Activity')\nplt.ylabel('Count')\nplt.xticks(rotation=45, ha='right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-11T13:40:45.029809Z","iopub.execute_input":"2024-09-11T13:40:45.030269Z","iopub.status.idle":"2024-09-11T13:40:49.237035Z","shell.execute_reply.started":"2024-09-11T13:40:45.030227Z","shell.execute_reply":"2024-09-11T13:40:49.235900Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to safely evaluate strings that are lists (for original data inspection)\ndef safely_evaluate(data):\n    try:\n        evaluated_data = literal_eval(data)\n        if isinstance(evaluated_data, list) and all(isinstance(item, str) for item in evaluated_data):\n            return ' '.join(evaluated_data)\n        else:\n            return ''\n    except (ValueError, SyntaxError):\n        return ''\n\n# Load the datasets as excel files \nplaces_df = pd.read_excel(\"/kaggle/input/travelsenseds/Places Dataset.xlsx\")\npreferences_df = pd.read_excel(\"/kaggle/input/travelsenseds/Visitors Preference Dataset.xlsx\")\n\n# Application of TF-IDF vector\n\n# Initialize the TF-IDF Vectorizer\ntfidf_vectorizer = TfidfVectorizer(stop_words='english')\n\n# Vectorize the original places data\ntfidf_matrix = tfidf_vectorizer.fit_transform(places_df['latest_reviews'].apply(lambda x: safely_evaluate(x)))\n\n# Vectorize user preferences\nuser_preferences_vector = tfidf_vectorizer.transform(preferences_df['Preferred Activities'].apply(lambda x: safely_evaluate(x)) + ' ' + preferences_df['Bucket list destinations Sri Lanka'].apply(lambda x: safely_evaluate(x)))\n\n# Compute similarity scores between user preferences and places\nsimilarity_scores = cosine_similarity(user_preferences_vector, tfidf_matrix)\n\n# If similarity scores are calculated, add them to the DataFrame (average of all user preferences)\nif not similarity_scores.size == 0:\n    places_df['similarity'] = similarity_scores.mean(axis=0)\n    # Sort the places DataFrame by similarity score to get recommendations\n    recommended_places = places_df.sort_values(by='similarity', ascending=False)\n    \n    # Display the top 10 recommended places\n    print(recommended_places[['name', 'similarity']].head(10))\n    \n    # Visualization of similarity scores\n    plt.figure(figsize=(12, 6))\n    sns.histplot(places_df['similarity'].dropna(), bins=30, kde=True, color='purple')\n    plt.title('Distribution of Similarity Scores')\n    plt.xlabel('Similarity Score')\n    plt.ylabel('Frequency')\n    plt.show()\n    \n    # Visualization of top 10 recommended places\n    plt.figure(figsize=(12, 6))\n    sns.barplot(data=recommended_places.head(10), x='name', y='similarity', palette='viridis')\n    plt.title('Top 10 Recommended Places')\n    plt.xlabel('Place Name')\n    plt.ylabel('Similarity Score')\n    plt.xticks(rotation=45, ha='right')\n    plt.show()\n\nelse:\n    print(\"No similarity scores were computed.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-11T13:40:49.239050Z","iopub.execute_input":"2024-09-11T13:40:49.239420Z","iopub.status.idle":"2024-09-11T13:40:54.319408Z","shell.execute_reply.started":"2024-09-11T13:40:49.239382Z","shell.execute_reply":"2024-09-11T13:40:54.318171Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to get recommendations for a specific user by user ID\ndef get_recommendations(user_id, top_n=10):  # Specify how many recommendations are needed by top_n\n    # Check if the user exists in the dataset\n    if user_id not in preferences_df['User ID'].values:\n        return f\"User ID {user_id} not found.\"\n    \n    # Get the index of the user\n    user_index = preferences_df[preferences_df['User ID'] == user_id].index[0]\n    \n    # Get the user's name\n    user_name = preferences_df.loc[preferences_df['User ID'] == user_id, 'Name'].values[0]\n\n    # Get the similarity scores for that user\n    user_scores = similarity_scores[user_index]\n    \n    # Sort places by similarity score for this user\n    recommended_indices = user_scores.argsort()[-top_n:][::-1]\n    \n    # Get the top n recommended places\n    recommended_places = places_df.iloc[recommended_indices].copy()\n    \n    # Add a column for the user's name in the recommendations\n    recommended_places['User Name'] = user_name\n    \n    # Reset index for readability (1-based index)\n    recommended_places.index = recommended_places.index + 1\n    \n    # Sort recommendations by rating in descending order\n    recommendations_sorted = recommended_places.sort_values(by='rating', ascending=False)\n    \n    return user_name, recommendations_sorted[['name', 'formatted_address', 'rating', 'latest_reviews']]\n\n# Function to plot the recommendations as a bar chart\ndef plot_recommendations(recommendations_sorted, user_name):\n    plt.figure(figsize=(20, 5))\n    sns.barplot(x='rating', y='name', data=recommendations_sorted, palette='viridis')\n    plt.title(f\"Top Recommendations for {user_name} Based on Ratings\")\n    plt.xlabel('Rating')\n    plt.ylabel('Place')\n    plt.show()\n\n# Example: Get top recommendations for a user and plot them\nuser_id = 80  # Example user ID, adjust based on your data\nuser_name, recommendations_sorted = get_recommendations(user_id)\n\nprint(f\"Top Recommendations for {user_name}\")\n\n# Display the recommendations in a table\ndisplay(recommendations_sorted)\n\n# Plot the recommendations for the user\nplot_recommendations(recommendations_sorted.head(10), user_name)  # Use the sorted DataFrame here\n","metadata":{"execution":{"iopub.status.busy":"2024-09-11T13:40:54.321494Z","iopub.execute_input":"2024-09-11T13:40:54.322064Z","iopub.status.idle":"2024-09-11T13:40:54.748804Z","shell.execute_reply.started":"2024-09-11T13:40:54.322007Z","shell.execute_reply":"2024-09-11T13:40:54.747640Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pickle\n\n#SAVING the model\n\n# Save TF-IDF Vectorizer\nwith open('tfidf_vectorizer.pkl', 'wb') as f:\n    pickle.dump(tfidf_vectorizer, f)\n\n# Save Similarity Scores\nwith open('similarity_scores.pkl', 'wb') as f:\n    pickle.dump(similarity_scores, f)\n\n# Save Places DataFrame\nplaces_df.to_pickle('places_df.pkl')\n\n# Save Preferences DataFrame\npreferences_df.to_pickle('preferences_df.pkl')\n","metadata":{"execution":{"iopub.status.busy":"2024-09-11T15:06:43.515925Z","iopub.execute_input":"2024-09-11T15:06:43.516348Z","iopub.status.idle":"2024-09-11T15:06:43.624287Z","shell.execute_reply.started":"2024-09-11T15:06:43.516310Z","shell.execute_reply":"2024-09-11T15:06:43.622875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#LOADING the model\n\n# Load TF-IDF Vectorizer\nwith open('tfidf_vectorizer.pkl', 'rb') as f:\n    tfidf_vectorizer = pickle.load(f)\n\n# Load Similarity Scores\nwith open('similarity_scores.pkl', 'rb') as f:\n    similarity_scores = pickle.load(f)\n\n# Load Places DataFrame\nplaces_df = pd.read_pickle('places_df.pkl')\n\n# Load Preferences DataFrame\npreferences_df = pd.read_pickle('preferences_df.pkl')\n","metadata":{"execution":{"iopub.status.busy":"2024-09-11T15:08:29.186388Z","iopub.execute_input":"2024-09-11T15:08:29.186984Z","iopub.status.idle":"2024-09-11T15:08:29.239121Z","shell.execute_reply.started":"2024-09-11T15:08:29.186935Z","shell.execute_reply":"2024-09-11T15:08:29.237558Z"},"trusted":true},"execution_count":null,"outputs":[]}]}